"use strict";(self.webpackChunkmikechesterwang_github_io=self.webpackChunkmikechesterwang_github_io||[]).push([[687],{3905:function(e,n,r){r.d(n,{Zo:function(){return u},kt:function(){return m}});var t=r(7294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function c(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=t.createContext({}),s=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},u=function(e){var n=s(e.components);return t.createElement(l.Provider,{value:n},e.children)},f={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=s(r),m=o,g=p["".concat(l,".").concat(m)]||p[m]||f[m]||i;return r?t.createElement(g,a(a({ref:n},u),{},{components:r})):t.createElement(g,a({ref:n},u))}));function m(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=p;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var s=2;s<i;s++)a[s]=r[s];return t.createElement.apply(null,a)}return t.createElement.apply(null,r)}p.displayName="MDXCreateElement"},8316:function(e,n,r){r.r(n),r.d(n,{assets:function(){return u},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return c},metadata:function(){return s},toc:function(){return f}});var t=r(7462),o=r(3366),i=(r(7294),r(3905)),a=["components"],c={},l=void 0,s={unversionedId:"go/generic",id:"go/generic",title:"generic",description:"Use environment variables to overwrite yaml config object",source:"@site/docs/go/generic.md",sourceDirName:"go",slug:"/go/generic",permalink:"/docs/go/generic",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Basic commands",permalink:"/docs/f3discovery/basic"},next:{title:"Go Web development Starter Template",permalink:"/docs/go/starter"}},u={},f=[{value:"Use environment variables to overwrite yaml config object",id:"use-environment-variables-to-overwrite-yaml-config-object",level:2}],p={toc:f};function m(e){var n=e.components,r=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,t.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"use-environment-variables-to-overwrite-yaml-config-object"},"Use environment variables to overwrite yaml config object"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'\nconst PREFIX = "MYVAR_"\n\nfunc patchWithEnv[T any](config T) (newConfig T, err error) {\n    envPatch := make(map[string]interface{})\n    for _, v := range os.Environ() {\n        if strings.HasPrefix(v, PREFIX) {\n            k := strings.Split(v, "=")[0]\n            f(envPatch, k, strings.ToLower(strings.Replace(k, PREFIX, "", 1)))\n        }\n    }\n\n    original, err := convert[map[string]interface{}](Conf)\n    if err != nil {\n        return\n    }\n    if err = patch(original, envPatch); err != nil {\n        return\n    }\n    newConfig, err = convert[T](original)\n    return\n}\n\n// using yaml marshaller to convert an object to map[string]interface{} or reverse\nfunc convert[T any](o any) (result T, err error) {\n    raw, err := yaml.Marshal(o)\n    if err != nil {\n        return\n    }\n    resultPtr := new(T)\n    if err = yaml.Unmarshal(raw, resultPtr); err != nil {\n        return\n    }\n    result = *resultPtr\n    return result, nil\n}\n\n// update the original map using patch\nfunc patch(o map[string]interface{}, p map[string]interface{}) error {\n    for k := range p {\n        if _, ok := o[k]; ok { // if o has the same key\n            if _, ok := o[k].(map[string]interface{}); ok {\n                if _, ok := p[k].(map[string]interface{}); !ok {\n                    return fmt.Errorf("%s of %s is not a map", k, p)\n                }\n                // o[k] and p[k] are both map\n                return patch(o[k].(map[string]interface{}), p[k].(map[string]interface{}))\n            } else { // both are values\n                o[k] = p[k]\n            }\n        } else { // o does not have this key\n            o[k] = p[k]\n        }\n    }\n    return nil\n}\n\n// recursively turn a list of environment variables to a map\n// for example, TEST_LOG_LEVEL=INFO will be placed at {test: {log: {level: "INFO"}}}\nfunc f(curr map[string]interface{}, originalKey string, key string) {\n    i := strings.Index(key, "_")\n    if i == -1 {\n        val := os.Getenv(originalKey)\n        if intVal, err := strconv.Atoi(val); err == nil {\n            curr[key] = intVal\n        } else if boolVal, err := strconv.ParseBool(val); err == nil {\n            curr[key] = boolVal\n        } else {\n            curr[key] = val\n        }\n    } else {\n        thisKey := key[:i]\n        curr[thisKey] = make(map[string]interface{})\n        f(curr[thisKey].(map[string]interface{}), originalKey, key[i+1:])\n    }\n}\n\n')))}m.isMDXComponent=!0}}]);