"use strict";(self.webpackChunkmikechesterwang_github_io=self.webpackChunkmikechesterwang_github_io||[]).push([[6457],{3905:function(e,n,r){r.d(n,{Zo:function(){return s},kt:function(){return g}});var t=r(7294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function c(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?c(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function a(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},c=Object.keys(e);for(t=0;t<c.length;t++)r=c[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(t=0;t<c.length;t++)r=c[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=t.createContext({}),u=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},s=function(e){var n=u(e.components);return t.createElement(l.Provider,{value:n},e.children)},f={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,c=e.originalType,l=e.parentName,s=a(e,["components","mdxType","originalType","parentName"]),p=u(r),g=o,m=p["".concat(l,".").concat(g)]||p[g]||f[g]||c;return r?t.createElement(m,i(i({ref:n},s),{},{components:r})):t.createElement(m,i({ref:n},s))}));function g(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var c=r.length,i=new Array(c);i[0]=p;var a={};for(var l in n)hasOwnProperty.call(n,l)&&(a[l]=n[l]);a.originalType=e,a.mdxType="string"==typeof e?e:o,i[1]=a;for(var u=2;u<c;u++)i[u]=r[u];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}p.displayName="MDXCreateElement"},9299:function(e,n,r){r.r(n),r.d(n,{assets:function(){return s},contentTitle:function(){return l},default:function(){return g},frontMatter:function(){return a},metadata:function(){return u},toc:function(){return f}});var t=r(7462),o=r(3366),c=(r(7294),r(3905)),i=["components"],a={},l="Sqlc model layer with transaction",u={unversionedId:"go/mock-sqlc-tx",id:"go/mock-sqlc-tx",title:"Sqlc model layer with transaction",description:"To generate mocking module for the model layer using sqlc and transaction,",source:"@site/docs/go/mock-sqlc-tx.md",sourceDirName:"go",slug:"/go/mock-sqlc-tx",permalink:"/docs/go/mock-sqlc-tx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"generic",permalink:"/docs/go/generic"},next:{title:"Go Web development Starter Template",permalink:"/docs/go/starter"}},s={},f=[],p={toc:f};function g(e){var n=e.components,r=(0,o.Z)(e,i);return(0,c.kt)("wrapper",(0,t.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,c.kt)("h1",{id:"sqlc-model-layer-with-transaction"},"Sqlc model layer with transaction"),(0,c.kt)("p",null,"To generate mocking module for the model layer using sqlc and transaction,\nwe can use interface to bind all methods of querier to the model.\nThe generated mocking model can also assert if the ",(0,c.kt)("inlineCode",{parentName:"p"},"RunTransaction")," is called."),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-go"},'package model\n\nimport (\n    "context"\n    "fmt"\n    "time"\n\n    "github.com/jackc/pgx/v5"\n    "github.com/jackc/pgx/v5/pgxpool"\n    "github.com/pkg/errors"\n    "github.com/xich-dev/backbone/pkg/config"\n    "github.com/xich-dev/backbone/pkg/model/querier"\n)\n\nvar (\n    ErrAlreadyInTransaction = errors.New("already in transaction")\n)\n\ntype ModelInterface interface {\n    querier.Querier\n    RunTransaction(ctx context.Context, f func(model ModelInterface) error) error\n}\n\ntype Model struct {\n    querier.Querier\n    beginTx func(ctx context.Context) (pgx.Tx, error)\n}\n\nfunc (m *Model) RunTransaction(ctx context.Context, f func(model ModelInterface) error) error {\n    tx, err := m.beginTx(ctx)\n    if err != nil {\n        return err\n    }\n    defer tx.Rollback(ctx)\n\n    if err := f(\n        &Model{\n            Querier: querier.New(tx),\n            beginTx: func(ctx context.Context) (pgx.Tx, error) {\n                return nil, ErrAlreadyInTransaction\n            },\n        },\n    ); err != nil {\n        return err\n    }\n\n    return tx.Commit(ctx)\n}\n\nfunc NewModel(cfg *config.Config) (ModelInterface, error) {\n    dsn := fmt.Sprintf(`host=%s user=%s password=%s dbname=%s port=%d connect_timeout=15 TimeZone=Asia/Shanghai`,\n        cfg.Pg.Host,\n        cfg.Pg.User,\n        cfg.Pg.Password,\n        cfg.Pg.Db,\n        cfg.Pg.Port,\n    )\n    config, err := pgxpool.ParseConfig(dsn)\n    if err != nil {\n        return nil, errors.Wrapf(err, "failed to parse pgxpool config: %s", dsn)\n    }\n\n    ctx, cancel := context.WithTimeout(context.TODO(), 10*time.Second)\n    defer cancel()\n\n    pool, err := pgxpool.NewWithConfig(ctx, config)\n    if err != nil {\n        return nil, errors.Wrap(err, "failed to init pgxpool")\n    }\n\n    if err := pool.Ping(ctx); err != nil {\n        return nil, errors.Wrap(err, "failed to ping db")\n    }\n\n    return &Model{Querier: querier.New(pool), beginTx: pool.Begin}, nil\n}\n\n')))}g.isMDXComponent=!0}}]);